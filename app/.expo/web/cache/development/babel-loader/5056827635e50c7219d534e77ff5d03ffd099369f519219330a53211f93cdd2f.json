{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Form, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport Header from \"./Header.js\";\nimport \"./styles/Question.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar LOG_VIEW_MUTATION = gql`\n  mutation logView($questionId: ID!) {\n    logView(questionId: $questionId) {\n      event_type\n      user {\n        id\n      }\n    }\n  }\n`;\nvar CREATE_ANSWER_MUTATION = gql`\nmutation createAnswer($answer: String!, $questionListId: ID!){\n  createAnswer(answer: $answer, questionListId: $questionListId) {\n    id\n    answer\n    user {\n      id\n      name\n    }\n  }\n}`;\nvar GET_QUESTION_QUERY = gql`\n  query getQuestion($id: ID!) {\n    getQuestion(id: $id) {\n      id\n      title\n      user {\n        id\n        name\n        email\n      }\n      answers {\n        id\n        answer\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\nfunction QuestionPage() {\n  var _useParams = useParams(),\n    id = _useParams.id;\n  var _useQuery = useQuery(GET_QUESTION_QUERY, {\n      variables: {\n        id: id\n      }\n    }),\n    loading = _useQuery.loading,\n    error = _useQuery.error,\n    data = _useQuery.data;\n  var _useMutation = useMutation(CREATE_ANSWER_MUTATION),\n    _useMutation2 = _slicedToArray(_useMutation, 1),\n    createAnswer = _useMutation2[0];\n  var isAuthenticated = function isAuthenticated() {\n    var token = localStorage.getItem('token');\n    return !!token;\n  };\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    newAnswer = _useState2[0],\n    setNewAnswer = _useState2[1];\n  var _useMutation3 = useMutation(LOG_VIEW_MUTATION),\n    _useMutation4 = _slicedToArray(_useMutation3, 1),\n    logView = _useMutation4[0];\n  var handleAnswerSubmit = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        yield createAnswer({\n          variables: {\n            answer: newAnswer,\n            questionListId: id\n          },\n          refetchQueries: [{\n            query: GET_QUESTION_QUERY,\n            variables: {\n              id: id\n            }\n          }]\n        });\n        setNewAnswer('');\n      } catch (error) {\n        console.error('Error creating answer:', error.message);\n      }\n    });\n    return function handleAnswerSubmit() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var logViewOnMount = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          yield logView({\n            variables: {\n              questionId: id\n            }\n          });\n        } catch (error) {\n          console.error('Error logging view:', error.message);\n        }\n      });\n      return function logViewOnMount() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    logViewOnMount();\n    return function () {};\n  }, [id, logView]);\n  if (loading) return _jsx(\"p\", {\n    children: \"Loading...\"\n  });\n  if (error) return _jsxs(\"p\", {\n    children: [\"Error: \", error.message]\n  });\n  var question = data.getQuestion;\n  return _jsxs(\"div\", {\n    className: \"question-page\",\n    children: [_jsx(Header, {}), _jsxs(Container, {\n      children: [_jsxs(\"div\", {\n        className: \"question-container\",\n        children: [_jsx(\"h1\", {\n          className: \"question-title\",\n          children: \"Question Details\"\n        }), _jsxs(\"div\", {\n          children: [_jsx(\"strong\", {\n            children: \"Title:\"\n          }), \" \", question.title]\n        })]\n      }), _jsx(\"h2\", {\n        children: \"Answers\"\n      }), _jsx(\"div\", {\n        children: isAuthenticated() ? _jsx(_Fragment, {\n          children: _jsxs(Form, {\n            children: [_jsxs(Form.Group, {\n              controlId: \"formAnswer\",\n              children: [_jsx(Form.Label, {\n                children: \"Your Answer\"\n              }), _jsx(Form.Control, {\n                type: \"text\",\n                placeholder: \"Type your answer here\",\n                value: newAnswer,\n                onChange: function onChange(e) {\n                  return setNewAnswer(e.target.value);\n                }\n              })]\n            }), _jsx(Button, {\n              variant: \"primary\",\n              onClick: handleAnswerSubmit,\n              children: \"Create Answer\"\n            })]\n          })\n        }) : _jsx(\"p\", {\n          children: \"Please log in to create a answer.\"\n        })\n      }), question.answers.map(function (answer) {\n        return _jsx(Card, {\n          className: \"answer-card\",\n          children: _jsxs(Card.Body, {\n            children: [_jsx(Card.Title, {\n              className: \"answer-user\",\n              children: answer.user.name\n            }), _jsx(Card.Text, {\n              className: \"answer-text\",\n              children: answer.answer\n            })]\n          })\n        }, answer.id);\n      })]\n    })]\n  });\n}\nexport { QuestionPage };","map":{"version":3,"names":["React","useState","useEffect","Container","Card","Form","Button","useQuery","useMutation","useParams","gql","Header","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","LOG_VIEW_MUTATION","CREATE_ANSWER_MUTATION","GET_QUESTION_QUERY","QuestionPage","_useParams","id","_useQuery","variables","loading","error","data","_useMutation","_useMutation2","_slicedToArray","createAnswer","isAuthenticated","token","localStorage","getItem","_useState","_useState2","newAnswer","setNewAnswer","_useMutation3","_useMutation4","logView","handleAnswerSubmit","_ref","_asyncToGenerator","answer","questionListId","refetchQueries","query","console","message","apply","arguments","logViewOnMount","_ref2","questionId","children","question","getQuestion","className","title","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","variant","onClick","answers","map","Body","Title","user","name","Text"],"sources":["C:/Users/ABN AniGame/Documents/GitHub/StudyBarter/app/web/view/Question.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Card, Form, Button } from 'react-bootstrap';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { useParams } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\nimport Header from './Header.js';\r\nimport './styles/Question.css'; // Import the custom styles\r\n\r\n\r\nconst LOG_VIEW_MUTATION = gql`\r\n  mutation logView($questionId: ID!) {\r\n    logView(questionId: $questionId) {\r\n      event_type\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_ANSWER_MUTATION = gql`\r\nmutation createAnswer($answer: String!, $questionListId: ID!){\r\n  createAnswer(answer: $answer, questionListId: $questionListId) {\r\n    id\r\n    answer\r\n    user {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}`\r\n\r\nconst GET_QUESTION_QUERY = gql`\r\n  query getQuestion($id: ID!) {\r\n    getQuestion(id: $id) {\r\n      id\r\n      title\r\n      user {\r\n        id\r\n        name\r\n        email\r\n      }\r\n      answers {\r\n        id\r\n        answer\r\n        user {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction QuestionPage() {\r\n  const { id } = useParams();\r\n  const { loading, error, data } = useQuery(GET_QUESTION_QUERY, {\r\n    variables: { id },\r\n  });\r\n\r\n  // Добавляем useMutation\r\n  const [createAnswer] = useMutation(CREATE_ANSWER_MUTATION);\r\n\r\n  const isAuthenticated = () => {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n  }\r\n\r\n  // Добавляем состояние для управления содержимым формы\r\n  const [newAnswer, setNewAnswer] = useState('');\r\n  const [logView] = useMutation(LOG_VIEW_MUTATION);\r\n\r\n  const handleAnswerSubmit = async () => {\r\n    try {    \r\n      await createAnswer({\r\n        variables: { answer: newAnswer, questionListId: id },\r\n        refetchQueries: [{ query: GET_QUESTION_QUERY, variables: { id } }],\r\n      });\r\n      setNewAnswer('');\r\n    } catch (error) {\r\n      console.error('Error creating answer:', error.message);\r\n    }\r\n    \r\n  };\r\n\r\n  \r\n  useEffect(() => {\r\n    const logViewOnMount = async () => {\r\n      try {\r\n        await logView({ variables: { questionId: id } });\r\n      } catch (error) {\r\n        console.error('Error logging view:', error.message);\r\n      }\r\n    };\r\n\r\n    logViewOnMount(); // Log view on component mount\r\n\r\n    return () => {\r\n      // Cleanup function, if needed\r\n    };\r\n  }, [id, logView]);  \r\n  \r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n\r\n  const question = data.getQuestion;\r\n\r\n  return (\r\n    <div className=\"question-page\">\r\n      <Header />\r\n      <Container>\r\n        <div className=\"question-container\">\r\n          <h1 className=\"question-title\">Question Details</h1>\r\n          <div>\r\n            <strong>Title:</strong> {question.title}\r\n          </div>\r\n        </div>\r\n\r\n        <h2>Answers</h2>\r\n        <div>\r\n          {isAuthenticated() ? (\r\n              <>\r\n                \r\n                <Form>\r\n                  <Form.Group controlId=\"formAnswer\">\r\n                    <Form.Label>Your Answer</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      placeholder=\"Type your answer here\"\r\n                      value={newAnswer}\r\n                      onChange={(e) => setNewAnswer(e.target.value)}\r\n                    />\r\n                  </Form.Group>\r\n                  <Button variant=\"primary\" onClick={handleAnswerSubmit}>\r\n                    Create Answer\r\n                  </Button>\r\n                </Form>\r\n              </>\r\n            ) : (\r\n              // You can add additional content or a login prompt here if the user is not authenticated\r\n              <p>Please log in to create a answer.</p>\r\n            )}\r\n        </div>\r\n        \r\n        {question.answers.map((answer) => (\r\n          <Card key={answer.id} className=\"answer-card\">\r\n            <Card.Body>\r\n              <Card.Title className=\"answer-user\">{answer.user.name}</Card.Title>\r\n              <Card.Text className=\"answer-text\">{answer.answer}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        ))}\r\n\r\n        \r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { QuestionPage };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}