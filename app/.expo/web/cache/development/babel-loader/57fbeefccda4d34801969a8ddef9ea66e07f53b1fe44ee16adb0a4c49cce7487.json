{"ast":null,"code":"import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, ListGroup } from 'react-bootstrap';\nimport { GET_RECOMMEND_QUESTION_QUERY } from \"./gql/operation.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction Recommendation() {\n  var _useQuery = useQuery(GET_RECOMMEND_QUESTION_QUERY),\n    recommendationLoading = _useQuery.loading,\n    recommendationError = _useQuery.error,\n    recommendationData = _useQuery.data;\n  if (recommendationLoading) {\n    return _jsx(\"p\", {\n      children: \"Loading...\"\n    });\n  }\n  if (recommendationError) {\n    return _jsx(\"p\", {\n      children: \"Error loading recommendations\"\n    });\n  }\n  var recommendations = recommendationData == null ? void 0 : recommendationData.recommendQuestions;\n  if (!recommendations || recommendations.length === 0) {\n    return _jsx(\"p\", {\n      children: \"No recommendations available at the moment.\"\n    });\n  }\n  return _jsxs(Card, {\n    children: [_jsx(Card.Header, {\n      children: _jsx(\"h2\", {\n        children: \"Recommendations\"\n      })\n    }), _jsx(ListGroup, {\n      variant: \"flush\",\n      children: recommendations.map(function (recommendation) {\n        return _jsx(ListGroup.Item, {\n          children: _jsx(Link, {\n            to: `/question/${recommendation.id}`,\n            children: recommendation.title\n          })\n        }, recommendation.id);\n      })\n    })]\n  });\n}\nexport { Recommendation };","map":{"version":3,"names":["React","useQuery","Link","Card","ListGroup","GET_RECOMMEND_QUESTION_QUERY","jsx","_jsx","jsxs","_jsxs","Recommendation","_useQuery","recommendationLoading","loading","recommendationError","error","recommendationData","data","children","recommendations","recommendQuestions","length","Header","variant","map","recommendation","Item","to","id","title"],"sources":["C:/Users/ABN AniGame/Documents/GitHub/StudyBarter/app/web/view/recommendation.js"],"sourcesContent":["import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card, ListGroup } from 'react-bootstrap'; // Импортируем элементы из react-bootstrap\r\nimport { GET_RECOMMEND_QUESTION_QUERY } from './gql/operation.js';\r\n\r\nfunction Recommendation() {\r\n    const { loading: recommendationLoading, error: recommendationError, data: recommendationData } = useQuery(GET_RECOMMEND_QUESTION_QUERY);\r\n\r\n    if (recommendationLoading) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (recommendationError) {\r\n        return <p>Error loading recommendations</p>;\r\n    }\r\n    \r\n    const recommendations = recommendationData?.recommendQuestions; // Замените на фактическую структуру данных\r\n    \r\n    if (!recommendations || recommendations.length === 0) {\r\n        return <p>No recommendations available at the moment.</p>;\r\n    }\r\n    \r\n    return (\r\n        <Card>\r\n            <Card.Header>\r\n                <h2>Recommendations</h2>\r\n            </Card.Header>\r\n            <ListGroup variant=\"flush\">\r\n                {recommendations.map((recommendation) => (\r\n                    <ListGroup.Item key={recommendation.id}>\r\n                        <Link to={`/question/${recommendation.id}`}>\r\n                            {recommendation.title}\r\n                        </Link>\r\n                    </ListGroup.Item>\r\n                ))}\r\n            </ListGroup>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport { Recommendation };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,sCAAsC;AAC7C,SAASC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACjD,SAASC,4BAA4B;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAElE,SAASC,cAAcA,CAAA,EAAG;EACtB,IAAAC,SAAA,GAAiGV,QAAQ,CAACI,4BAA4B,CAAC;IAAtHO,qBAAqB,GAAAD,SAAA,CAA9BE,OAAO;IAAgCC,mBAAmB,GAAAH,SAAA,CAA1BI,KAAK;IAA6BC,kBAAkB,GAAAL,SAAA,CAAxBM,IAAI;EAExE,IAAIL,qBAAqB,EAAE;IACvB,OAAOL,IAAA;MAAAW,QAAA,EAAG;IAAU,CAAG,CAAC;EAC5B;EAEA,IAAIJ,mBAAmB,EAAE;IACrB,OAAOP,IAAA;MAAAW,QAAA,EAAG;IAA6B,CAAG,CAAC;EAC/C;EAEA,IAAMC,eAAe,GAAGH,kBAAkB,oBAAlBA,kBAAkB,CAAEI,kBAAkB;EAE9D,IAAI,CAACD,eAAe,IAAIA,eAAe,CAACE,MAAM,KAAK,CAAC,EAAE;IAClD,OAAOd,IAAA;MAAAW,QAAA,EAAG;IAA2C,CAAG,CAAC;EAC7D;EAEA,OACIT,KAAA,CAACN,IAAI;IAAAe,QAAA,GACDX,IAAA,CAACJ,IAAI,CAACmB,MAAM;MAAAJ,QAAA,EACRX,IAAA;QAAAW,QAAA,EAAI;MAAe,CAAI;IAAC,CACf,CAAC,EACdX,IAAA,CAACH,SAAS;MAACmB,OAAO,EAAC,OAAO;MAAAL,QAAA,EACrBC,eAAe,CAACK,GAAG,CAAC,UAACC,cAAc;QAAA,OAChClB,IAAA,CAACH,SAAS,CAACsB,IAAI;UAAAR,QAAA,EACXX,IAAA,CAACL,IAAI;YAACyB,EAAE,EAAG,aAAYF,cAAc,CAACG,EAAG,EAAE;YAAAV,QAAA,EACtCO,cAAc,CAACI;UAAK,CACnB;QAAC,GAHUJ,cAAc,CAACG,EAIpB,CAAC;MAAA,CACpB;IAAC,CACK,CAAC;EAAA,CACV,CAAC;AAEf;AAEA,SAASlB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}