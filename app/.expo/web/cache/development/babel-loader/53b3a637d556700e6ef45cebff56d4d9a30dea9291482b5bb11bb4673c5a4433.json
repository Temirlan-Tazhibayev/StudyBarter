{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nvar URI = 'http://localhost:4000/';\nvar httpLink = createHttpLink({\n  uri: URI\n});\nvar authLink = setContext(function () {\n  var _ref2 = _asyncToGenerator(function* (_, _ref) {\n    var headers = _ref.headers;\n    var token = yield localStorage.getItem('token');\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token || ''\n      })\n    };\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","URI","httpLink","uri","authLink","_ref2","_asyncToGenerator","_","_ref","headers","token","localStorage","getItem","_objectSpread","authorization","_x","_x2","apply","arguments","client","link","concat","cache"],"sources":["C:/Users/ABN AniGame/Documents/GitHub/StudyBarter/app/apollo.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { setContext } from '@apollo/client/link/context';\r\n// import localStorage from 'react-native';\r\n\r\n\r\nconst URI = 'http://localhost:4000/';\r\n\r\nconst httpLink = createHttpLink({\r\n    uri: URI,\r\n});\r\n\r\nconst authLink = setContext(async (_, { headers }) => {\r\n    // get the authentication token from local storage if it exists\r\n    const token = await localStorage.getItem('token');\r\n    // return the headers to the context so httpLink can read them\r\n    return {\r\n        headers: {\r\n        ...headers,\r\n        authorization: token || '',\r\n        }\r\n    }\r\n    });\r\n\r\nexport const client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n});\r\n"],"mappings":";;;;AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAC5E,SAASC,UAAU,QAAQ,6BAA6B;AAIxD,IAAMC,GAAG,GAAG,wBAAwB;AAEpC,IAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC5BI,GAAG,EAAEF;AACT,CAAC,CAAC;AAEF,IAAMG,QAAQ,GAAGJ,UAAU;EAAA,IAAAK,KAAA,GAAAC,iBAAA,CAAC,WAAOC,CAAC,EAAAC,IAAA,EAAkB;IAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAE3C,IAAMC,KAAK,SAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEjD,OAAO;MACHH,OAAO,EAAAI,aAAA,CAAAA,aAAA,KACJJ,OAAO;QACVK,aAAa,EAAEJ,KAAK,IAAI;MAAE;IAE9B,CAAC;EACD,CAAC;EAAA,iBAAAK,EAAA,EAAAC,GAAA;IAAA,OAAAX,KAAA,CAAAY,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAEN,OAAO,IAAMC,MAAM,GAAG,IAAItB,YAAY,CAAC;EACnCuB,IAAI,EAAEhB,QAAQ,CAACiB,MAAM,CAACnB,QAAQ,CAAC;EAC/BoB,KAAK,EAAE,IAAIxB,aAAa,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}